// The following directive is necessary to make the package coherent:

//go:build ignore
// +build ignore

// This program generates {$publish}/_redirects file. It can be invoked
// by running go generate
package main

import (
	"fmt"
	"log"
	"os"
	"text/template"
	"time"
)

func main() {
	// SELF_ACTOR is input from the quick-deploy template
	// SITE_NAME is env var from Netlify build
	var selfActor = os.Getenv("SELF_ACTOR")
	var selfSubdomain = fmt.Sprintf("%s.netlify.app", os.Getenv("SITE_NAME"))

	printRedirects(selfActor, selfSubdomain)
	printWebfinger(selfActor, selfSubdomain)
	printFollowers(selfActor, selfSubdomain)
	printFollowing(selfActor, selfSubdomain)
	printActor(selfActor, selfSubdomain)
}

func printRedirects(actor string, subdomain string) {
	f, err := os.Create("dist/_redirects")
	if err != nil {
		log.Fatalf("FAIL redirects file - %v", err)
	}
	defer f.Close()

	redirectsTemplate.Execute(f, struct {
		Timestamp    time.Time
		SelfActor    string
		ResourceAcct string
		ResourceMail string
		ResourceBase string
		ResourceRoot string
	}{
		Timestamp:    time.Now(),
		SelfActor:    actor,
		ResourceAcct: fmt.Sprintf("acct:%s@%s", actor, subdomain),
		ResourceMail: fmt.Sprintf("mailto:%s@%s", actor, subdomain),
		ResourceBase: fmt.Sprintf("https://%s", subdomain),
		ResourceRoot: fmt.Sprintf("https://%s/", subdomain),
	})
}

func printWebfinger(actor string, subdomain string) {
	f, err := os.Create("public/webfinger.json")
	if err != nil {
		log.Fatalf("FAIL webfinger file - %v", err)
	}
	defer f.Close()

	webfingerTemplate.Execute(f, struct {
		SelfActor    string
		ResourceAcct string
		ResourceRoot string
	}{
		SelfActor:    actor,
		ResourceAcct: fmt.Sprintf("acct:%s@%s", actor, subdomain),
		ResourceRoot: fmt.Sprintf("https://%s/", subdomain),
	})
}

func printFollowers(actor string, subdomain string) {
	f, err := os.Create("public/followers.json")
	if err != nil {
		log.Fatalf("FAIL followers file - %v", err)
	}
	defer f.Close()

	followersTemplate.Execute(f, struct {
		SelfActor    string
		ResourceRoot string
	}{
		SelfActor:    actor,
		ResourceRoot: fmt.Sprintf("https://%s/", subdomain),
	})
}

func printFollowing(actor string, subdomain string) {
	f, err := os.Create("public/following.json")
	if err != nil {
		log.Fatalf("FAIL following file - %v", err)
	}
	defer f.Close()

	followingTemplate.Execute(f, struct {
		SelfActor    string
		ResourceRoot string
	}{
		SelfActor:    actor,
		ResourceRoot: fmt.Sprintf("https://%s/", subdomain),
	})
}

func printActor(actor string, subdomain string) {
	f, err := os.Create("public/actor.json")
	if err != nil {
		log.Fatalf("FAIL actor file - %v", err)
	}
	defer f.Close()

	actorTemplate.Execute(f, struct {
		Published    string
		SelfActor    string
		ResourceRoot string
		PublicPEM    string
	}{
		Published:    time.Now().Format("2006-01-02T15:04:05Z"),
		SelfActor:    actor,
		ResourceRoot: fmt.Sprintf("https://%s/", subdomain),
		PublicPEM:    "TODO TODO TODO",
	})
}

var redirectsTemplate = template.Must(template.New("").Parse(`# Code generated by go generate; DO NOT EDIT.
# This file was generated by robots at
# {{ .Timestamp }}

/api/* /.netlify/functions/:splat 200

# static webfinger 
/.well-known/webfinger resource={{ .ResourceAcct }} /webfinger.json 200
/.well-known/webfinger resource={{ .ResourceMail }} /webfinger.json 200
/.well-known/webfinger resource={{ .ResourceBase }} /webfinger.json 200
/.well-known/webfinger resource={{ .ResourceRoot }} /webfinger.json 200

# static actor 
/u/{{ .SelfActor }}/followers /followers.json 200
/u/{{ .SelfActor }}/following /following.json 200
/u/@{{ .SelfActor }} /u/{{ .SelfActor }} 200
/u/{{ .SelfActor }} /actor.json 200
`))

var webfingerTemplate = template.Must(template.New("").Parse(`
{
	"subject": "{{ .ResourceAcct }}",
	"aliases": [
		"{{ .ResourceRoot }}@{{ .SelfActor }}",
		"{{ .ResourceRoot }}u/{{ .SelfActor }}"
	],
	"links": [{
			"rel": "self",
			"type": "application/activity+json",
			"href": "{{ .ResourceRoot }}u/{{ .SelfActor }}"
		}
	]
}
`))

var followersTemplate = template.Must(template.New("").Parse(`
{
    "@context": "https://www.w3.org/ns/activitystreams",
    "id": "{{ .ResourceRoot }}u/{{ .SelfActor }}/followers",
    "type": "OrderedCollection",
    "totalItems": 1,
    "first": "{{ .ResourceRoot }}follower_accts"
}
`))

var followingTemplate = template.Must(template.New("").Parse(`
{
    "@context": "https://www.w3.org/ns/activitystreams",
    "id": "{{ .ResourceRoot }}u/{{ .SelfActor }}/following",
    "type": "OrderedCollection",
    "totalItems": 1,
    "first": "{{ .ResourceRoot }}following_accts"
}
`))

var actorTemplate = template.Must(template.New("").Parse(`
{
	"@context": [
		"https://www.w3.org/ns/activitystreams",
		"https://w3id.org/security/v1"
	],
	"id": "{{ .ResourceRoot }}u/{{ .SelfActor }}",
	"type": "Person",
	"following": "{{ .ResourceRoot }}u/{{ .SelfActor }}/following",
	"followers": "{{ .ResourceRoot }}u/{{ .SelfActor }}/followers",
	"inbox": "{{ .ResourceRoot }}api/inbox",
	"outbox": "{{ .ResourceRoot }}api/sort",
	"preferredUsername": "{{ .SelfActor }}",
	"name": "{{ .SelfActor }}",
	"summary": "Static mastodon profile demo",
	"manuallyApprovesFollowers": true,
	"discoverable": true,
	"published": "{{ .Published }}",

}
`))
